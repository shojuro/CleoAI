# Setup development environment for CleoAI
# This script configures SQLite and ChromaDB for local development

Write-Host "`nCleoAI Development Environment Setup" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

# Create necessary directories
Write-Host "`nCreating directories..." -ForegroundColor Yellow

$directories = @(
    "data",
    "data/memory",
    "data/chromadb",
    "models",
    "logs",
    "outputs",
    "outputs/evaluation",
    "outputs/checkpoints"
)

foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "  ✓ Created $dir" -ForegroundColor Green
    } else {
        Write-Host "  • $dir already exists" -ForegroundColor Gray
    }
}

# Create or update .env for development
Write-Host "`nConfiguring environment..." -ForegroundColor Yellow

$envContent = @"
# CleoAI Development Environment Configuration
# Auto-generated by setup_dev_environment.ps1

# API Settings
API_HOST=0.0.0.0
API_PORT=8000
API_RELOAD=true
LOG_LEVEL=INFO

# Development Mode - Use local storage only
USE_SQLITE=true
USE_CHROMADB=true
USE_REDIS=false
USE_MONGODB=false
USE_SUPABASE=false
USE_PINECONE=false

# SQLite Configuration
SQLITE_PATH=data/memory
SQLITE_DB_NAME=cleoai_memory.db

# ChromaDB Configuration
CHROMADB_PATH=data/chromadb
CHROMADB_COLLECTION=cleoai_embeddings

# Model Configuration
MODEL_CACHE_DIR=models
DEFAULT_MODEL=gpt2  # Small model for testing

# Performance Settings
MAX_MEMORY_RESULTS=100
SHORT_TERM_MEMORY_SIZE=16384
EMBEDDING_DIMENSION=768

# Development Settings
DEBUG=true
TESTING=true
"@

$envPath = ".env"
$backupPath = ".env.backup"

if (Test-Path $envPath) {
    Write-Host "  Backing up existing .env to .env.backup" -ForegroundColor Yellow
    Copy-Item $envPath $backupPath -Force
}

$envContent | Out-File -FilePath $envPath -Encoding UTF8
Write-Host "  ✓ Created development .env file" -ForegroundColor Green

# Create a simple SQLite initialization script
Write-Host "`nCreating database initialization script..." -ForegroundColor Yellow

$sqlInitScript = @"
-- SQLite initialization for CleoAI development
-- This creates the basic schema for memory storage

-- Short-term memory (conversations)
CREATE TABLE IF NOT EXISTS conversations (
    conversation_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata TEXT, -- JSON
    summary TEXT,
    token_count INTEGER DEFAULT 0
);

CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
CREATE INDEX IF NOT EXISTS idx_conversations_created_at ON conversations(created_at);

-- Conversation messages
CREATE TABLE IF NOT EXISTS messages (
    message_id INTEGER PRIMARY KEY AUTOINCREMENT,
    conversation_id TEXT NOT NULL,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata TEXT, -- JSON
    FOREIGN KEY (conversation_id) REFERENCES conversations(conversation_id)
);

CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);

-- User preferences (long-term memory)
CREATE TABLE IF NOT EXISTS user_preferences (
    preference_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    category TEXT NOT NULL,
    preference_key TEXT NOT NULL,
    preference_value TEXT NOT NULL, -- JSON
    confidence REAL DEFAULT 0.5,
    source TEXT DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, category, preference_key)
);

CREATE INDEX IF NOT EXISTS idx_preferences_user_id ON user_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_preferences_category ON user_preferences(category);

-- Episodic memories
CREATE TABLE IF NOT EXISTS episodic_memories (
    memory_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    importance REAL DEFAULT 0.5,
    emotion TEXT,
    tags TEXT, -- JSON array
    relations TEXT, -- JSON array
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    access_count INTEGER DEFAULT 0,
    embedding_id TEXT -- Reference to ChromaDB
);

CREATE INDEX IF NOT EXISTS idx_memories_user_id ON episodic_memories(user_id);
CREATE INDEX IF NOT EXISTS idx_memories_importance ON episodic_memories(importance);
CREATE INDEX IF NOT EXISTS idx_memories_created_at ON episodic_memories(created_at);

-- Procedural memories
CREATE TABLE IF NOT EXISTS procedural_memories (
    protocol_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    trigger_conditions TEXT NOT NULL, -- JSON
    steps TEXT NOT NULL, -- JSON
    success_count INTEGER DEFAULT 0,
    failure_count INTEGER DEFAULT 0,
    last_executed TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, name)
);

CREATE INDEX IF NOT EXISTS idx_protocols_user_id ON procedural_memories(user_id);
CREATE INDEX IF NOT EXISTS idx_protocols_name ON procedural_memories(name);

-- System metadata
CREATE TABLE IF NOT EXISTS system_metadata (
    key TEXT PRIMARY KEY,
    value TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert version info
INSERT OR REPLACE INTO system_metadata (key, value) VALUES ('schema_version', '1.0.0');
INSERT OR REPLACE INTO system_metadata (key, value) VALUES ('created_at', datetime('now'));
"@

$sqlInitScript | Out-File -FilePath "data/memory/init_schema.sql" -Encoding UTF8
Write-Host "  ✓ Created database schema file" -ForegroundColor Green

# Create a test data script
Write-Host "`nCreating test data script..." -ForegroundColor Yellow

$testDataScript = @"
import sqlite3
import json
import uuid
from datetime import datetime, timedelta
import random

# Connect to database
db_path = 'data/memory/cleoai_memory.db'
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Read and execute schema
with open('data/memory/init_schema.sql', 'r') as f:
    schema_sql = f.read()
    cursor.executescript(schema_sql)

print("Database initialized with schema")

# Create test data
test_user_id = "test_user_001"

# Create a test conversation
conv_id = str(uuid.uuid4())
cursor.execute("""
    INSERT INTO conversations (conversation_id, user_id, metadata, summary, token_count)
    VALUES (?, ?, ?, ?, ?)
""", (conv_id, test_user_id, json.dumps({"test": True, "source": "setup_script"}), 
      "Test conversation about AI and memory systems", 256))

# Add messages
messages = [
    ("user", "Hello! Can you tell me about your memory system?"),
    ("assistant", "I have a sophisticated memory system with multiple components:\n\n1. Short-term memory for conversations\n2. Long-term memory for user preferences\n3. Episodic memory for important events\n4. Procedural memory for learned tasks"),
    ("user", "That's interesting! How do you store user preferences?"),
    ("assistant", "User preferences are stored with confidence scores and sources. For example, if you tell me you prefer concise responses, I'll remember that with high confidence."),
]

for role, content in messages:
    cursor.execute("""
        INSERT INTO messages (conversation_id, role, content)
        VALUES (?, ?, ?)
    """, (conv_id, role, content))

# Add user preferences
preferences = [
    ("communication", "style", "detailed", 0.8, "explicit"),
    ("communication", "language", "English", 1.0, "explicit"),
    ("interests", "topics", json.dumps(["AI", "technology", "science"]), 0.7, "inferred"),
    ("behavior", "response_length", "medium", 0.6, "inferred"),
]

for category, key, value, confidence, source in preferences:
    pref_id = f"{test_user_id}:{category}:{key}"
    cursor.execute("""
        INSERT OR REPLACE INTO user_preferences 
        (preference_id, user_id, category, preference_key, preference_value, confidence, source)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (pref_id, test_user_id, category, key, value, confidence, source))

# Add episodic memories
memories = [
    ("Learning about AI", "User expressed strong interest in understanding AI architectures", 0.9, "curious"),
    ("First conversation", "Initial interaction where user tested the system", 0.7, "neutral"),
    ("Preference discovery", "User mentioned they work in technology", 0.8, "engaged"),
]

for title, content, importance, emotion in memories:
    memory_id = str(uuid.uuid4())
    tags = json.dumps(["test", "setup", "initial"])
    cursor.execute("""
        INSERT INTO episodic_memories 
        (memory_id, user_id, title, content, importance, emotion, tags)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (memory_id, test_user_id, title, content, importance, emotion, tags))

# Add a procedural memory
protocol_id = str(uuid.uuid4())
trigger_conditions = json.dumps({
    "keywords": ["summarize", "summary"],
    "context": "user_requests_summary"
})
steps = json.dumps([
    {"step": 1, "action": "identify_key_points"},
    {"step": 2, "action": "organize_by_importance"},
    {"step": 3, "action": "create_concise_summary"},
    {"step": 4, "action": "verify_accuracy"}
])

cursor.execute("""
    INSERT INTO procedural_memories 
    (protocol_id, user_id, name, description, trigger_conditions, steps)
    VALUES (?, ?, ?, ?, ?, ?)
""", (protocol_id, test_user_id, "summarization_protocol", 
      "Protocol for creating concise summaries", trigger_conditions, steps))

# Commit changes
conn.commit()
conn.close()

print(f"Test data created successfully!")
print(f"  - 1 conversation with {len(messages)} messages")
print(f"  - {len(preferences)} user preferences")
print(f"  - {len(memories)} episodic memories")
print(f"  - 1 procedural memory protocol")
print(f"\nTest user ID: {test_user_id}")
"@

$testDataScript | Out-File -FilePath "create_test_data.py" -Encoding UTF8
Write-Host "  ✓ Created test data script" -ForegroundColor Green

# Create a simple test script
Write-Host "`nCreating memory test script..." -ForegroundColor Yellow

$memoryTestScript = @"
# Test CleoAI memory system
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.memory.memory_manager import MemoryManager
import json

print("Testing CleoAI Memory System")
print("=" * 50)

try:
    # Initialize memory manager
    print("\n1. Initializing memory manager...")
    memory_manager = MemoryManager()
    print("   ✓ Success")
    
    # Test user
    test_user_id = "test_user_001"
    
    # Test retrieving conversations
    print("\n2. Testing conversation retrieval...")
    conversations = memory_manager.short_term.get_user_conversations(test_user_id, limit=10)
    print(f"   ✓ Found {len(conversations)} conversations")
    
    if conversations:
        conv = conversations[0]
        print(f"   - Conversation ID: {conv.conversation_id}")
        print(f"   - Messages: {len(conv.messages)}")
        print(f"   - Created: {conv.created_at}")
    
    # Test preferences
    print("\n3. Testing user preferences...")
    preferences = memory_manager.long_term.get_user_preferences(test_user_id)
    print(f"   ✓ Found {len(preferences)} preferences")
    
    for pref in preferences[:3]:  # Show first 3
        print(f"   - {pref.category}/{pref.preference_key}: {pref.preference_value} (confidence: {pref.confidence})")
    
    # Test episodic memories
    print("\n4. Testing episodic memories...")
    memories = memory_manager.episodic.get_user_memories(test_user_id, limit=10)
    print(f"   ✓ Found {len(memories)} memories")
    
    for mem in memories[:3]:  # Show first 3
        print(f"   - {mem.title}: importance={mem.importance}, emotion={mem.emotion}")
    
    # Test creating new conversation
    print("\n5. Testing conversation creation...")
    new_conv = memory_manager.short_term.create_conversation(
        user_id=test_user_id,
        metadata={"source": "test_script"}
    )
    print(f"   ✓ Created conversation: {new_conv.conversation_id}")
    
    # Add a message
    memory_manager.short_term.add_message(
        conversation_id=new_conv.conversation_id,
        role="user",
        content="This is a test message from the memory test script"
    )
    print("   ✓ Added test message")
    
    print("\n✓ All tests passed!")
    print("\nMemory system is working correctly with SQLite backend.")
    
except Exception as e:
    print(f"\n✗ Error: {e}")
    import traceback
    traceback.print_exc()
"@

$memoryTestScript | Out-File -FilePath "test_memory.py" -Encoding UTF8
Write-Host "  ✓ Created memory test script" -ForegroundColor Green

# Summary
Write-Host "`n" + "="*50 -ForegroundColor Cyan
Write-Host "Development Environment Setup Complete!" -ForegroundColor Green
Write-Host "="*50 -ForegroundColor Cyan

Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "  1. Create test data:" -ForegroundColor White
Write-Host "     python create_test_data.py" -ForegroundColor Gray
Write-Host ""
Write-Host "  2. Test memory system:" -ForegroundColor White
Write-Host "     python test_memory.py" -ForegroundColor Gray
Write-Host ""
Write-Host "  3. Start the API:" -ForegroundColor White
Write-Host "     python main.py api" -ForegroundColor Gray
Write-Host ""
Write-Host "  4. Test API endpoints:" -ForegroundColor White
Write-Host "     .\test_api.ps1" -ForegroundColor Gray

Write-Host "`nEnvironment configured for:" -ForegroundColor Cyan
Write-Host "  • SQLite for relational data" -ForegroundColor White
Write-Host "  • ChromaDB for vector embeddings" -ForegroundColor White
Write-Host "  • Local file storage only" -ForegroundColor White
Write-Host "  • No external dependencies" -ForegroundColor White

Write-Host "`nTo install more dependencies:" -ForegroundColor Yellow
Write-Host "  .\install_dependencies.ps1 check     # Check current status" -ForegroundColor Gray
Write-Host "  .\install_dependencies.ps1 core      # Add core packages" -ForegroundColor Gray
Write-Host "  .\install_dependencies.ps1 ml        # Add ML capabilities" -ForegroundColor Gray