input {
  # TCP input for JSON logs
  tcp {
    port => 5000
    codec => json
    type => "cleoai-json"
  }
  
  # File input for local logs
  file {
    path => "/logs/cleoai.log"
    start_position => "beginning"
    codec => json
    type => "cleoai-file"
    tags => ["cleoai", "application"]
  }
  
  # Audit log input
  file {
    path => "/logs/audit.log"
    start_position => "beginning"
    codec => json
    type => "cleoai-audit"
    tags => ["cleoai", "audit"]
  }
}

filter {
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add common fields
  mutate {
    add_field => {
      "environment" => "%{[service][environment]}"
      "service_name" => "%{[service][name]}"
      "service_version" => "%{[service][version]}"
    }
  }
  
  # Extract trace ID if present
  if [trace_id] {
    mutate {
      add_field => { "trace.id" => "%{trace_id}" }
    }
  }
  
  # Parse user agent
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_parsed"
    }
  }
  
  # GeoIP for IP addresses
  if [ip_address] {
    geoip {
      source => "ip_address"
      target => "geoip"
    }
  }
  
  # Special handling for audit logs
  if [type] == "cleoai-audit" {
    mutate {
      add_tag => [ "security", "compliance" ]
    }
  }
  
  # Extract error details
  if [level] == "ERROR" or [level_value] >= 40 {
    mutate {
      add_tag => [ "error" ]
    }
    
    # Extract stack trace if present
    if [exc_info] {
      mutate {
        add_field => { "error.stack_trace" => "%{exc_info}" }
      }
    }
  }
  
  # Performance metrics extraction
  if [performance] {
    mutate {
      add_field => {
        "performance.operation" => "%{[performance][operation]}"
        "performance.duration_ms" => "%{[performance][duration_ms]}"
        "performance.success" => "%{[performance][success]}"
      }
      add_tag => [ "performance" ]
    }
  }
  
  # Model inference metrics
  if [model_inference] {
    mutate {
      add_field => {
        "model.name" => "%{[model_inference][model_name]}"
        "model.version" => "%{[model_inference][model_version]}"
        "model.input_tokens" => "%{[model_inference][input_tokens]}"
        "model.output_tokens" => "%{[model_inference][output_tokens]}"
      }
      add_tag => [ "ml", "inference" ]
    }
  }
  
  # Memory operation metrics
  if [memory_operation] {
    mutate {
      add_field => {
        "memory.operation" => "%{[memory_operation][operation]}"
        "memory.backend" => "%{[memory_operation][backend]}"
        "memory.duration_ms" => "%{[memory_operation][duration_ms]}"
      }
      add_tag => [ "memory" ]
    }
  }
  
  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "api_key", "secret" ]
  }
  
  # Add index suffix based on log type
  if [type] == "cleoai-audit" {
    mutate {
      add_field => { "[@metadata][index_suffix]" => "audit" }
    }
  } else if "error" in [tags] {
    mutate {
      add_field => { "[@metadata][index_suffix]" => "errors" }
    }
  } else if "performance" in [tags] {
    mutate {
      add_field => { "[@metadata][index_suffix]" => "performance" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][index_suffix]" => "logs" }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "cleoai-%{[@metadata][index_suffix]}-%{+YYYY.MM.dd}"
    template_name => "cleoai"
    template => "/usr/share/logstash/templates/cleoai-template.json"
    template_overwrite => true
  }
  
  # Debug output (disable in production)
  stdout {
    codec => rubydebug
  }
}