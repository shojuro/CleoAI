#!/usr/bin/env python3
"""
Setup development environment for CleoAI
This script configures SQLite and ChromaDB for local development
"""
import os
import shutil
from pathlib import Path

print("\nCleoAI Development Environment Setup")
print("=" * 40)

# Create necessary directories
print("\nCreating directories...")
directories = [
    "data",
    "data/memory",
    "data/chromadb",
    "models",
    "logs",
    "outputs",
    "outputs/evaluation",
    "outputs/checkpoints"
]

for dir_path in directories:
    Path(dir_path).mkdir(parents=True, exist_ok=True)
    print(f"  ✓ Created {dir_path}")

# Create or update .env for development
print("\nConfiguring environment...")

env_content = """# CleoAI Development Environment Configuration
# Auto-generated by setup_dev_environment.py

# API Settings
API_HOST=0.0.0.0
API_PORT=8000
API_RELOAD=true
LOG_LEVEL=INFO

# Development Mode - Use local storage only
USE_SQLITE=true
USE_CHROMADB=true
USE_REDIS=false
USE_MONGODB=false
USE_SUPABASE=false
USE_PINECONE=false

# SQLite Configuration
SQLITE_PATH=data/memory
SQLITE_DB_NAME=cleoai_memory.db

# ChromaDB Configuration
CHROMADB_PATH=data/chromadb
CHROMADB_COLLECTION=cleoai_embeddings

# Model Configuration
MODEL_CACHE_DIR=models
DEFAULT_MODEL=gpt2  # Small model for testing

# Performance Settings
MAX_MEMORY_RESULTS=100
SHORT_TERM_MEMORY_SIZE=16384
EMBEDDING_DIMENSION=768

# Development Settings
DEBUG=true
TESTING=true
"""

env_path = Path(".env")
if env_path.exists():
    print("  Backing up existing .env to .env.backup")
    shutil.copy(env_path, ".env.backup")

with open(".env", "w", encoding="utf-8") as f:
    f.write(env_content)
print("  ✓ Created development .env file")

# Create SQLite initialization script
print("\nCreating database initialization script...")

sql_init_script = """-- SQLite initialization for CleoAI development
-- This creates the basic schema for memory storage

-- Short-term memory (conversations)
CREATE TABLE IF NOT EXISTS conversations (
    conversation_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata TEXT, -- JSON
    summary TEXT,
    token_count INTEGER DEFAULT 0
);

CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
CREATE INDEX IF NOT EXISTS idx_conversations_created_at ON conversations(created_at);

-- Conversation messages
CREATE TABLE IF NOT EXISTS messages (
    message_id INTEGER PRIMARY KEY AUTOINCREMENT,
    conversation_id TEXT NOT NULL,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata TEXT, -- JSON
    FOREIGN KEY (conversation_id) REFERENCES conversations(conversation_id)
);

CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);

-- User preferences (long-term memory)
CREATE TABLE IF NOT EXISTS user_preferences (
    preference_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    category TEXT NOT NULL,
    preference_key TEXT NOT NULL,
    preference_value TEXT NOT NULL, -- JSON
    confidence REAL DEFAULT 0.5,
    source TEXT DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, category, preference_key)
);

CREATE INDEX IF NOT EXISTS idx_preferences_user_id ON user_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_preferences_category ON user_preferences(category);

-- Episodic memories
CREATE TABLE IF NOT EXISTS episodic_memories (
    memory_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    importance REAL DEFAULT 0.5,
    emotion TEXT,
    tags TEXT, -- JSON array
    relations TEXT, -- JSON array
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    access_count INTEGER DEFAULT 0,
    embedding_id TEXT -- Reference to ChromaDB
);

CREATE INDEX IF NOT EXISTS idx_memories_user_id ON episodic_memories(user_id);
CREATE INDEX IF NOT EXISTS idx_memories_importance ON episodic_memories(importance);
CREATE INDEX IF NOT EXISTS idx_memories_created_at ON episodic_memories(created_at);

-- Procedural memories
CREATE TABLE IF NOT EXISTS procedural_memories (
    protocol_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    trigger_conditions TEXT NOT NULL, -- JSON
    steps TEXT NOT NULL, -- JSON
    success_count INTEGER DEFAULT 0,
    failure_count INTEGER DEFAULT 0,
    last_executed TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, name)
);

CREATE INDEX IF NOT EXISTS idx_protocols_user_id ON procedural_memories(user_id);
CREATE INDEX IF NOT EXISTS idx_protocols_name ON procedural_memories(name);

-- System metadata
CREATE TABLE IF NOT EXISTS system_metadata (
    key TEXT PRIMARY KEY,
    value TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert version info
INSERT OR REPLACE INTO system_metadata (key, value) VALUES ('schema_version', '1.0.0');
INSERT OR REPLACE INTO system_metadata (key, value) VALUES ('created_at', datetime('now'));
"""

with open("data/memory/init_schema.sql", "w", encoding="utf-8") as f:
    f.write(sql_init_script)
print("  ✓ Created database schema file")

print("\n" + "=" * 50)
print("Development Environment Setup Complete!")
print("=" * 50)

print("\nNext steps:")
print("  1. Create test data:")
print("     python create_test_data.py")
print("")
print("  2. Test memory system:")
print("     python test_memory.py")
print("")
print("  3. Start the API:")
print("     python main.py api")
print("")
print("  4. Test API endpoints:")
print("     .\\test_api.ps1  (or use curl/browser)")

print("\nEnvironment configured for:")
print("  • SQLite for relational data")
print("  • ChromaDB for vector embeddings")
print("  • Local file storage only")
print("  • No external dependencies")